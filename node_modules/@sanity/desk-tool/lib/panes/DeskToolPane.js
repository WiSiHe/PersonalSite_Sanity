"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeskToolPane = DeskToolPane;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _paneRouter = require("../contexts/paneRouter");

var _document = require("./document");

var _documentList = require("./documentList");

var _list = require("./list");

var _unknown = require("./unknown");

var _userComponent = require("./userComponent");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var paneMap = {
  component: _userComponent.UserComponentPane,
  document: _document.DocumentPane,
  documentList: _documentList.DocumentListPane,
  list: _list.ListPane
};
/**
 * @note The same pane might appear multiple times (split pane), so use index as tiebreaker
 *
 * @internal
 */

function DeskToolPane(props) {
  var group = props.group,
      groupIndexes = props.groupIndexes,
      i = props.i,
      index = props.index,
      pane = props.pane,
      paneKeys = props.paneKeys,
      panes = props.panes,
      sibling = props.sibling,
      siblingIndex = props.siblingIndex;
  var groupRoot = group[0];
  var isDuplicate = siblingIndex > 0 && sibling.id === groupRoot.id;
  var paneKey = "".concat(pane.type || 'unknown', "-").concat(paneKeys[i] || 'root', "-").concat(groupIndexes[i - 1] || '0');
  var itemId = paneKeys[i];
  var childItemId = paneKeys[i + 1] || '';
  var rootParams = (0, _react.useMemo)(() => (0, _omit2.default)(groupRoot.params || {}, _paneRouter.exclusiveParams), [groupRoot.params]);
  var params = (0, _react.useMemo)(() => isDuplicate ? _objectSpread(_objectSpread({}, rootParams), sibling.params || {}) : sibling.params || {}, [isDuplicate, rootParams, sibling.params]);
  var payload = isDuplicate ? sibling.payload || groupRoot.payload : sibling.payload;
  var isSelected = i === panes.length - 1;
  var isActive = i === panes.length - 2;
  var isClosable = siblingIndex > 0;
  var PaneComponent = paneMap[pane.type] || _unknown.UnknownPane;
  return /*#__PURE__*/_react.default.createElement(_paneRouter.PaneRouterProvider, {
    flatIndex: i,
    index: index,
    params: params,
    payload: payload,
    siblingIndex: siblingIndex
  }, /*#__PURE__*/_react.default.createElement(PaneComponent, {
    childItemId: childItemId,
    index: i,
    itemId: itemId,
    isActive: isActive,
    isSelected: isSelected,
    isClosable: isClosable // Use key to force rerendering pane on ID change
    ,
    key: paneKey,
    paneKey: paneKey,
    pane: pane,
    urlParams: params
  }));
}