"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPanelHeader = void 0;

var _negate2 = _interopRequireDefault(require("lodash/negate"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _languageSelectComponent = _interopRequireDefault(require("part:@sanity/desk-tool/language-select-component?"));

var _react = _interopRequireWildcard(require("react"));

var _pane = require("../../../../components/pane");

var _deskTool = require("../../../../contexts/deskTool");

var _paneRouter = require("../../../../contexts/paneRouter");

var _timeline = require("../../timeline");

var _DocumentHeaderTabs = require("./DocumentHeaderTabs");

var _ValidationMenu = require("./ValidationMenu");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var isActionButton = item => Boolean(item.showAsAction);

var isMenuButton = (0, _negate2.default)(isActionButton);
var DocumentPanelHeader = /*#__PURE__*/(0, _react.forwardRef)(function DocumentPanelHeader(props, ref) {
  var activeViewId = props.activeViewId,
      idPrefix = props.idPrefix,
      isClosable = props.isClosable,
      markers = props.markers,
      menuItems = props.menuItems,
      menuItemGroups = props.menuItemGroups,
      onCloseView = props.onCloseView,
      onContextMenuAction = props.onContextMenuAction,
      onSplitPane = props.onSplitPane,
      rev = props.rev,
      rootElement = props.rootElement,
      schemaType = props.schemaType,
      onSetFormInputFocus = props.onSetFormInputFocus,
      title = props.title,
      views = props.views;

  var _useDeskTool = (0, _deskTool.useDeskTool)(),
      features = _useDeskTool.features;

  var _usePaneRouter = (0, _paneRouter.usePaneRouter)(),
      index = _usePaneRouter.index;

  var contextMenuItems = (0, _react.useMemo)(() => menuItems.filter(isMenuButton), [menuItems]);

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isValidationOpen = _React$useState2[0],
      setValidationOpen = _React$useState2[1];

  var showTabs = views.length > 1;
  var showVersionMenu = features.reviewChanges || views.length === 1;

  var languageMenu = _languageSelectComponent.default && /*#__PURE__*/_react.default.createElement(_languageSelectComponent.default, {
    key: "language-menu",
    schemaType: schemaType
  });

  var validationMenu = (0, _react.useMemo)(() => markers.length > 0 && /*#__PURE__*/_react.default.createElement(_ValidationMenu.ValidationMenu, {
    boundaryElement: rootElement,
    isOpen: isValidationOpen,
    key: "validation-menu",
    markers: markers,
    schemaType: schemaType,
    setFocusPath: onSetFormInputFocus,
    setOpen: setValidationOpen
  }), [isValidationOpen, markers, onSetFormInputFocus, rootElement, schemaType]);
  var contextMenu = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_pane.PaneContextMenuButton, {
    itemGroups: menuItemGroups,
    items: contextMenuItems,
    key: "context-menu",
    onAction: onContextMenuAction
  }), [contextMenuItems, menuItemGroups, onContextMenuAction]);
  var splitPaneButton = (0, _react.useMemo)(() => {
    if (!features.splitViews || !onSplitPane || views.length <= 1) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.SplitVerticalIcon,
      key: "split-pane-button",
      mode: "bleed",
      onClick: onSplitPane,
      title: "Split pane right"
    });
  }, [features.splitViews, onSplitPane, views.length]);
  var closeViewButton = (0, _react.useMemo)(() => {
    if (!features.splitViews || !onSplitPane || !isClosable) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.CloseIcon,
      key: "close-view-button",
      mode: "bleed",
      onClick: onCloseView,
      title: "Close pane"
    });
  }, [features.splitViews, isClosable, onCloseView, onSplitPane]);
  var tabs = (0, _react.useMemo)(() => showTabs && /*#__PURE__*/_react.default.createElement(_DocumentHeaderTabs.DocumentHeaderTabs, {
    activeViewId: activeViewId,
    idPrefix: idPrefix,
    views: views
  }), [activeViewId, idPrefix, showTabs, views]);
  return /*#__PURE__*/_react.default.createElement(_pane.PaneHeader, {
    actions: /*#__PURE__*/_react.default.createElement(_ui.Inline, {
      space: 1
    }, languageMenu, validationMenu, contextMenu, splitPaneButton, closeViewButton),
    backButton: features.backButton && index > 0 && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      as: _paneRouter.BackLink,
      "data-as": "a",
      icon: _icons.ArrowLeftIcon,
      mode: "bleed"
    }),
    ref: ref,
    subActions: showVersionMenu && /*#__PURE__*/_react.default.createElement(_timeline.TimelineMenu, {
      chunk: rev,
      mode: "rev"
    }),
    tabs: tabs,
    title: title
  });
});
exports.DocumentPanelHeader = DocumentPanelHeader;