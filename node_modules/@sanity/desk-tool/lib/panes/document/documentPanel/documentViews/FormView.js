"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormView = void 0;

var _presence = require("@sanity/base/presence");

var _ui = require("@sanity/ui");

var _documentActionUtils = require("part:@sanity/base/util/document-action-utils");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _afterEditorComponent = _interopRequireDefault(require("all:part:@sanity/desk-tool/after-editor-component"));

var _filterFieldsFn = _interopRequireDefault(require("part:@sanity/desk-tool/filter-fields-fn?"));

var _react = _interopRequireDefault(require("react"));

var _EditForm = require("./EditForm");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = () => undefined;

var INITIAL_STATE = {
  filterField: () => true
};

class FormView extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", INITIAL_STATE);

    _defineProperty(this, "filterFieldFnSubscription", null);

    _defineProperty(this, "handleBlur", () => {// do nothing
    });

    _defineProperty(this, "handleEditAsActualType", () => {// @todo
    });
  }

  componentDidMount() {
    if (_filterFieldsFn.default) {
      this.filterFieldFnSubscription = _filterFieldsFn.default.subscribe(filterField => this.setState({
        filterField
      }));
    }
  }

  componentWillUnmount() {
    if (this.filterFieldFnSubscription) {
      this.filterFieldFnSubscription.unsubscribe();
    }
  }

  isReadOnly() {
    var _this$props = this.props,
        value = _this$props.value,
        schemaType = _this$props.schemaType,
        isConnected = _this$props.isConnected,
        readOnly = _this$props.readOnly;
    var isNonExistent = !value || !value._id;
    return readOnly || !isConnected || !(0, _documentActionUtils.isActionEnabled)(schemaType, 'update') || isNonExistent && !(0, _documentActionUtils.isActionEnabled)(schemaType, 'create');
  }

  render() {
    var _this$props2 = this.props,
        id = _this$props2.id,
        focusPath = _this$props2.focusPath,
        onFocus = _this$props2.onFocus,
        value = _this$props2.value,
        initialValue = _this$props2.initialValue,
        markers = _this$props2.markers,
        schemaType = _this$props2.schemaType,
        compareValue = _this$props2.compareValue,
        margins = _this$props2.margins;
    var filterField = this.state.filterField;
    var readOnly = this.isReadOnly();

    var documentId = value && value._id && value._id.replace(/^drafts\./, '');

    var hasTypeMismatch = value && value._type && value._type !== schemaType.name;

    if (hasTypeMismatch) {
      return /*#__PURE__*/_react.default.createElement(_ui.Container, {
        paddingX: 4,
        paddingY: 5,
        sizing: "border",
        width: 1
      }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "This document is of type ", /*#__PURE__*/_react.default.createElement("code", null, value === null || value === void 0 ? void 0 : value._type), " and cannot be edited as", ' ', /*#__PURE__*/_react.default.createElement("code", null, schemaType.name), "."), /*#__PURE__*/_react.default.createElement(_ui.Box, {
        marginTop: 4
      }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
        onClick: this.handleEditAsActualType,
        text: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Edit as ", value === null || value === void 0 ? void 0 : value._type, " instead"),
        tone: "critical"
      })));
    }

    return /*#__PURE__*/_react.default.createElement(_ui.Container, {
      paddingX: 4,
      paddingTop: 5,
      paddingBottom: 9,
      sizing: "border",
      width: 1
    }, /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, {
      margins: margins
    }, /*#__PURE__*/_react.default.createElement(_EditForm.EditForm, {
      id: id,
      value: value || initialValue,
      compareValue: compareValue,
      filterField: filterField,
      focusPath: focusPath,
      markers: markers,
      onBlur: this.handleBlur,
      onChange: readOnly ? noop : this.props.onChange,
      onFocus: onFocus,
      readOnly: readOnly,
      schema: _schema.default,
      type: schemaType
    })), _afterEditorComponent.default.map((AfterEditorComponent, idx) => /*#__PURE__*/_react.default.createElement(AfterEditorComponent, {
      key: String(idx),
      documentId: documentId
    })));
  }

}

exports.FormView = FormView;

_defineProperty(FormView, "defaultProps", {
  markers: [],
  isConnected: true
});