"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPanel = DocumentPanel;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _hooks = require("@sanity/base/hooks");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _documentHistory = require("../documentHistory");

var _pane = require("../../../components/pane");

var _usePaneLayout2 = require("../../../components/pane/usePaneLayout");

var _deskTool = require("../../../contexts/deskTool");

var _header = require("./header");

var _documentViews = require("./documentViews");

var _PermissionCheckBanner = require("./PermissionCheckBanner");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Scroller = (0, _styledComponents.default)(_components.ScrollContainer)(_ref => {
  var $disabled = _ref.$disabled;

  if ($disabled) {
    return {
      height: '100%'
    };
  }

  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  "])));
});

function DocumentPanel(props) {
  var activeViewId = props.activeViewId,
      documentId = props.documentId,
      documentType = props.documentType,
      draft = props.draft,
      footerHeight = props.footerHeight,
      formInputFocusPath = props.formInputFocusPath,
      idPrefix = props.idPrefix,
      initialValue = props.initialValue,
      isClosable = props.isClosable,
      isHistoryOpen = props.isHistoryOpen,
      markers = props.markers,
      menuItems = props.menuItems,
      menuItemGroups = props.menuItemGroups,
      onChange = props.onChange,
      onFormInputFocus = props.onFormInputFocus,
      onCloseView = props.onCloseView,
      onMenuAction = props.onMenuAction,
      onSplitPane = props.onSplitPane,
      paneTitle = props.paneTitle,
      published = props.published,
      rootElement = props.rootElement,
      schemaType = props.schemaType,
      value = props.value,
      compareValue = props.compareValue,
      views = props.views;

  var _usePaneLayout = (0, _usePaneLayout2.usePaneLayout)(),
      layoutCollapsed = _usePaneLayout.collapsed;

  var parentPortal = (0, _ui.usePortal)();

  var _useDeskTool = (0, _deskTool.useDeskTool)(),
      features = _useDeskTool.features;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      headerElement = _useState2[0],
      setHeaderElement = _useState2[1];

  var headerRect = (0, _ui.useElementRect)(headerElement);
  var portalRef = (0, _react.useRef)(null);

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      documentViewerContainerElement = _useState4[0],
      setDocumentViewerContainerElement = _useState4[1];

  var _useDocumentHistory = (0, _documentHistory.useDocumentHistory)(),
      displayed = _useDocumentHistory.displayed,
      historyController = _useDocumentHistory.historyController;

  var activeView = (0, _react.useMemo)(() => views.find(view => view.id === activeViewId) || views[0] || {
    type: 'form'
  }, [activeViewId, views]);
  var revTime = historyController.revTime;

  var _useCurrentUser = (0, _hooks.useCurrentUser)(),
      currentUser = _useCurrentUser.value;

  var requiredPermission = value !== null && value !== void 0 && value._createdAt ? 'update' : 'create';
  var permission = (0, _hooks.unstable_useCheckDocumentPermission)(documentId, documentType, requiredPermission); // Use a local portal container when split panes is supported

  var portalElement = features.splitPanes ? portalRef.current || parentPortal.element : parentPortal.element; // Calculate the height of the header

  var margins = (0, _react.useMemo)(() => {
    if (layoutCollapsed) {
      return [(headerRect === null || headerRect === void 0 ? void 0 : headerRect.height) || 0, 0, footerHeight ? footerHeight + 2 : 2, 0];
    }

    return [0, 0, 2, 0];
  }, [layoutCollapsed, footerHeight, headerRect]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    flex: 2,
    overflow: layoutCollapsed ? undefined : 'hidden'
  }, /*#__PURE__*/_react.default.createElement(_header.DocumentPanelHeader, {
    activeViewId: activeViewId,
    idPrefix: idPrefix,
    isClosable: isClosable,
    markers: markers,
    menuItemGroups: menuItemGroups,
    menuItems: menuItems,
    onCloseView: onCloseView,
    onContextMenuAction: onMenuAction,
    onSplitPane: onSplitPane,
    rootElement: rootElement,
    schemaType: schemaType,
    onSetFormInputFocus: onFormInputFocus,
    title: /*#__PURE__*/_react.default.createElement(_header.DocumentHeaderTitle, {
      documentType: documentType,
      paneTitle: paneTitle,
      value: value
    }),
    views: views,
    ref: setHeaderElement,
    rev: revTime,
    isHistoryOpen: isHistoryOpen
  }), /*#__PURE__*/_react.default.createElement(_pane.PaneContent, null, /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: portalElement
  }, /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: documentViewerContainerElement
  }, activeView.type === 'form' && /*#__PURE__*/_react.default.createElement(_PermissionCheckBanner.PermissionCheckBanner, {
    permission: permission,
    requiredPermission: requiredPermission,
    currentUser: currentUser
  }), /*#__PURE__*/_react.default.createElement(Scroller, {
    $disabled: layoutCollapsed,
    "data-ui": "Scroller",
    ref: setDocumentViewerContainerElement
  }, activeView.type === 'form' && /*#__PURE__*/_react.default.createElement(_documentViews.FormView, {
    id: documentId,
    initialValue: initialValue,
    focusPath: formInputFocusPath,
    onFocus: onFormInputFocus,
    markers: markers,
    onChange: onChange,
    readOnly: revTime !== null || !permission.granted,
    schemaType: schemaType,
    value: displayed,
    margins: margins,
    compareValue: compareValue
  }), activeView.type === 'component' && /*#__PURE__*/(0, _react.createElement)(activeView.component, {
    document: {
      draft: draft,
      displayed: displayed || value || initialValue,
      historical: displayed,
      published: published
    },
    documentId,
    options: activeView.options,
    schemaType
  })), /*#__PURE__*/_react.default.createElement("div", {
    "data-testid": "document-panel-portal",
    ref: portalRef
  })))));
}