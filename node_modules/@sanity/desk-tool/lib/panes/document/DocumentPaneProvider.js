"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPaneProvider = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactHooks = require("@sanity/react-hooks");

var _ui = require("@sanity/ui");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _error = require("../error");

var _loading = require("../loading");

var _documentHistory = require("./documentHistory");

var _DocumentPane = require("./DocumentPane");

var _initialValue = require("./lib/initialValue");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * @internal
 */
var DocumentPaneProvider = function DocumentPaneProvider(props) {
  var index = props.index,
      isClosable = props.isClosable,
      pane = props.pane,
      paneKey = props.paneKey;
  var options = pane.options,
      menuItemGroups = pane.menuItemGroups,
      title = pane.title,
      views = pane.views;
  var initialValue = (0, _initialValue.useInitialValue)(options.id, pane.options);
  var documentIdRaw = options.id;
  var documentId = (0, _draftUtils.getPublishedId)(documentIdRaw);
  var documentTypeName = options.type;

  var _useDocumentOperation = (0, _reactHooks.useDocumentOperation)(documentId, documentTypeName),
      patch = _useDocumentOperation.patch;

  var editState = (0, _reactHooks.useEditState)(documentId, documentTypeName);

  var _useValidationStatus = (0, _reactHooks.useValidationStatus)(documentId, documentTypeName),
      markers = _useValidationStatus.markers;

  var connectionState = (0, _reactHooks.useConnectionState)(documentId, documentTypeName);

  var schemaType = _schema.default.get(documentTypeName);

  var value = (editState === null || editState === void 0 ? void 0 : editState.draft) || (editState === null || editState === void 0 ? void 0 : editState.published) || initialValue.value;
  var onChange = (0, _react.useCallback)(patches => patch.execute(patches, initialValue.value), [patch, initialValue.value]);

  if (!schemaType) {
    return /*#__PURE__*/_react.default.createElement(_error.ErrorPane, _extends({}, props, {
      flex: 2.5,
      minWidth: 320,
      title: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Unknown document type: ", /*#__PURE__*/_react.default.createElement("code", null, documentTypeName)),
      tone: "caution"
    }), /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 4
    }, documentTypeName && /*#__PURE__*/_react.default.createElement(_ui.Text, {
      as: "p"
    }, "This document has the schema type ", /*#__PURE__*/_react.default.createElement("code", null, documentTypeName), ", which is not defined as a type in the local content studio schema."), !documentTypeName && /*#__PURE__*/_react.default.createElement(_ui.Text, {
      as: "p"
    }, "This document does not exist, and no schema type was specified for it."), __DEV__ && value && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      as: "p"
    }, "Here is the JSON representation of the document:"), /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 3,
      overflow: "auto",
      radius: 2,
      shadow: 1,
      tone: "inherit"
    }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
      language: "json",
      size: [1, 1, 2]
    }, JSON.stringify(value, null, 2))))));
  }

  if (connectionState === 'connecting' || !editState) {
    return /*#__PURE__*/_react.default.createElement(_loading.LoadingPane, _extends({}, props, {
      flex: 2.5,
      minWidth: 320,
      title: "Loading ".concat(schemaType.title, "\u2026")
    }));
  }

  if (initialValue.error) {
    return /*#__PURE__*/_react.default.createElement(_error.ErrorPane, {
      flex: 2.5,
      minWidth: 320,
      title: "Failed to resolve initial value"
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      as: "p"
    }, "Check developer console for details."));
  }

  return /*#__PURE__*/_react.default.createElement(_documentHistory.DocumentHistoryProvider, {
    documentId: documentId,
    value: value
  }, /*#__PURE__*/_react.default.createElement(_DocumentPane.DocumentPane, {
    title: title,
    connectionState: connectionState,
    documentId: documentId,
    documentIdRaw: documentIdRaw,
    documentType: documentTypeName,
    draft: editState.draft,
    index: index,
    initialValue: initialValue.value,
    isClosable: isClosable,
    markers: markers,
    menuItemGroups: menuItemGroups,
    onChange: onChange,
    paneKey: paneKey,
    published: editState.published,
    schemaType: schemaType,
    value: value,
    compareValue: editState.published,
    views: views
  }));
};

exports.DocumentPaneProvider = DocumentPaneProvider;