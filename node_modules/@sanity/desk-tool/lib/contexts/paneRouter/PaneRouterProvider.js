"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneRouterProvider = PaneRouterProvider;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _router = require("@sanity/base/router");

var _react = _interopRequireWildcard(require("react"));

var _constants = require("./constants");

var _ChildLink = require("./ChildLink");

var _PaneRouterContext = require("./PaneRouterContext");

var _ParameterizedLink = require("./ParameterizedLink");

var _excluded = ["view"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_SET_PARAMS_OPTIONS = {
  recurseIfInherited: false
};
/**
 * @internal
 */

function PaneRouterProvider(props) {
  var children = props.children,
      flatIndex = props.flatIndex,
      index = props.index,
      paneParams = props.params,
      panePayload = props.payload,
      siblingIndex = props.siblingIndex;

  var _useRouter = (0, _router.useRouter)(),
      navigate = _useRouter.navigate,
      navigateIntent = _useRouter.navigateIntent;

  var routerState = (0, _router.useRouterState)();
  var routerPanes = (0, _react.useMemo)(() => (routerState === null || routerState === void 0 ? void 0 : routerState.panes) || [], [routerState === null || routerState === void 0 ? void 0 : routerState.panes]);
  var groupIndex = index - 1;
  var getCurrentGroup = (0, _react.useCallback)(() => {
    return (routerPanes[groupIndex] || []).slice();
  }, [groupIndex, routerPanes]);
  var modifyCurrentGroup = (0, _react.useCallback)(modifier => {
    var newPanes = routerPanes.slice();
    var group = getCurrentGroup();
    newPanes.splice(groupIndex, 1, modifier(group, group[siblingIndex]));

    var newRouterState = _objectSpread(_objectSpread({}, routerState || {}), {}, {
      panes: newPanes
    });

    navigate(newRouterState);
    return newRouterState;
  }, [getCurrentGroup, groupIndex, navigate, routerPanes, routerState, siblingIndex]);
  var setPayload = (0, _react.useCallback)(nextPayload => {
    modifyCurrentGroup((siblings, item) => {
      var newGroup = siblings.slice();
      newGroup[siblingIndex] = _objectSpread(_objectSpread({}, item), {}, {
        payload: nextPayload
      });
      return newGroup;
    });
  }, [modifyCurrentGroup, siblingIndex]);
  var setParams = (0, _react.useCallback)(function (nextParams) {
    var setOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _DEFAULT_SET_PARAMS_O = _objectSpread(_objectSpread({}, DEFAULT_SET_PARAMS_OPTIONS), setOptions),
        recurseIfInherited = _DEFAULT_SET_PARAMS_O.recurseIfInherited;

    modifyCurrentGroup((siblings, item) => {
      var isGroupRoot = siblingIndex === 0;
      var isDuplicate = !isGroupRoot && item.id === siblings[0].id;
      var newGroup = siblings.slice();

      if (!isDuplicate) {
        newGroup[siblingIndex] = _objectSpread(_objectSpread({}, item), {}, {
          params: nextParams
        });
        return newGroup;
      }

      var rootParams = siblings[0].params;

      if (recurseIfInherited) {
        var newParamKeys = Object.keys(nextParams);
        var inheritedKeys = Object.keys(paneParams).filter(key => rootParams[key] === paneParams[key]);
        var removedInheritedKeys = inheritedKeys.filter(key => !nextParams[key]);
        var remainingInheritedKeys = newParamKeys.filter(key => inheritedKeys.includes(key));
        var exclusiveKeys = newParamKeys.filter(key => !inheritedKeys.includes(key));
        var exclusive = (0, _pick2.default)(nextParams, exclusiveKeys);

        var inherited = _objectSpread(_objectSpread({}, (0, _omit2.default)(rootParams, removedInheritedKeys)), (0, _pick2.default)(nextParams, remainingInheritedKeys));

        newGroup[0] = _objectSpread(_objectSpread({}, item), {}, {
          params: inherited
        });
        newGroup[siblingIndex] = _objectSpread(_objectSpread({}, item), {}, {
          params: exclusive
        });
      } else {
        // If it's a duplicate of the group root, we should only set the parameters
        // that differ from the group root.
        var newParams = Object.keys(nextParams).reduce((siblingParams, key) => {
          if (_constants.exclusiveParams.includes(key) || nextParams[key] !== rootParams[key]) {
            siblingParams[key] = nextParams[key];
          }

          return siblingParams;
        }, {});
        newGroup[siblingIndex] = _objectSpread(_objectSpread({}, item), {}, {
          params: newParams
        });
      }

      return newGroup;
    });
  }, [modifyCurrentGroup, paneParams, siblingIndex]);
  var ctx = (0, _react.useMemo)(() => ({
    // Zero-based index (position) of pane, visually
    index: flatIndex,
    // Zero-based index of pane group (within URL structure)
    groupIndex,
    // Zero-based index of pane within sibling group
    siblingIndex,
    // Payload of the current pane
    payload: panePayload,
    // Params of the current pane
    params: paneParams,
    // Whether or not the pane has any siblings (within the same group)
    hasGroupSiblings: getCurrentGroup().length > 1,
    // The length of the current group
    groupLength: getCurrentGroup().length,
    // Current router state for the "panes" property
    routerPanesState: routerPanes,
    // Curried StateLink that passes the correct state automatically
    ChildLink: _ChildLink.ChildLink,
    // Curried StateLink that passed the correct state, but merges params/payload
    ParameterizedLink: _ParameterizedLink.ParameterizedLink,
    // Replaces the current pane with a new one
    replaceCurrent: function replaceCurrent() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          id = _ref.id,
          payload = _ref.payload,
          params = _ref.params;

      modifyCurrentGroup(() => [{
        id,
        payload,
        params
      }]);
    },
    // Removes the current pane from the group
    closeCurrent: () => {
      modifyCurrentGroup((siblings, item) => siblings.length > 1 ? siblings.filter(sibling => sibling !== item) : siblings);
    },
    // Duplicate the current pane, with optional overrides for payload, parameters
    duplicateCurrent: options => {
      var _ref2 = options || {},
          payload = _ref2.payload,
          params = _ref2.params;

      modifyCurrentGroup((siblings, item) => {
        var newGroup = siblings.slice();
        newGroup.splice(siblingIndex + 1, 0, _objectSpread(_objectSpread({}, item), {}, {
          payload: payload || item.payload,
          params: params || item.params
        }));
        return newGroup;
      });
    },
    // Set the view for the current pane
    setView: viewId => {
      var view = paneParams.view,
          rest = _objectWithoutProperties(paneParams, _excluded);

      return setParams(viewId ? _objectSpread(_objectSpread({}, rest), {}, {
        view: viewId
      }) : rest);
    },
    // Set the parameters for the current pane
    setParams,
    // Set the payload for the current pane
    setPayload,
    // Proxied navigation to a given intent. Consider just exposing `router` instead?
    navigateIntent
  }), [flatIndex, getCurrentGroup, groupIndex, modifyCurrentGroup, paneParams, panePayload, navigateIntent, routerPanes, setParams, setPayload, siblingIndex]);
  return /*#__PURE__*/_react.default.createElement(_PaneRouterContext.PaneRouterContext.Provider, {
    value: ctx
  }, children);
}